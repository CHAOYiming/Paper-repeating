####################################
# scRNA-seq downstream analysis
# Paper: TME https://pubmed.ncbi.nlm.nih.gov/31588021/
# Dataset: GSE125449_Set1
# 2021-7-19 Yiming
####################################

library(Matrix)
library(dplyr)
library(Seurat)
library(patchwork)
library(scSorter)


rm(list = ls())
setwd("/usersdata/yiming/hcc/matrix")


# construct matrix after cellranger
mat <- readMM(file = "GSE125449_Set1_matrix.mtx")
feature.names = read.delim("GSE125449_Set1_genes.tsv", header = FALSE, stringsAsFactors = FALSE)
barcode.names = read.delim("GSE125449_Set1_barcodes.tsv", header = FALSE, stringsAsFactors = FALSE)
colnames(mat) = barcode.names $ V1
rownames(mat) = feature.names $ V2

celltype <- read.delim("GSE125449_Set1_samples.txt", header = TRUE)
Idents(sample) = celltype$Type

# feature.names <- make.unique(as.character(feature.names))

# duplicated(rownames(feature.names))
# which(!  duplicated(rownames(feature.names)))


# setup Seurat object with the raw data (non-normalized data)
sample <- CreateSeuratObject(counts = mat, project = "sample", min.cells = 3, min.features = 100)
sample

# quality control
sample[["percent.mt"]] <- PercentageFeatureSet(sample, pattern = "^MT-")
VlnPlot(sample, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(sample, feature1 = "nFeature_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(sample, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
sample <- subset(sample, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 15)

# normalization 
sample <- NormalizeData(sample, normalization.method = "LogNormalize", scale.factor = 10000)
sample <- FindVariableFeatures(sample, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(sample), 10)
top20 <- head(VariableFeatures(sample), 20)
top30 <- head(VariableFeatures(sample), 30)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(sample)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2

# scaling data
all.genes <- rownames(sample)
sample <- ScaleData(sample, features = all.genes)

# dimension reduction
sample <- RunPCA(sample, features = VariableFeatures(object = sample))

# Examine and visualize PCA results a few different ways
print(sample[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(sample, dims = 1:2, reduction = "pca")
DimPlot(sample, reduction = "pca")
DimHeatmap(sample, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(sample, dims = 1:15, cells = 500, balanced = TRUE)

# cell clusters
sample <- FindNeighbors(sample, dims = 1:10)
sample <- FindClusters(sample, resolution = 0.5)

# UMAP
sample <- RunUMAP(sample, dims = 1:10)
DimPlot(sample, reduction = "umap")
DimPlot(sample, reduction = "umap", split.by = 'ident')

# expression examination
diffgenes <- c("Cd34","Ccl6","Mpo","Cd14","Camp","Hba-a1","H2afz","Hmgb2","Runx1")
diffgenes <- c("CD14", "CD3D", "CD24", "CD47")
FeaturePlot(sample, features = diffgenes)
DotPlot(object = sample, features = diffgenes)

# load annotation file
anno <- read.csv(file = "../analysis/tme_annotation.csv", header = TRUE )

# Identify the 10 most highly variable genes
topgenes <- head(VariableFeatures(sample), 2000)
expr = GetAssayData(sample)
topgene_filter = rowSums(as.matrix(expr)[topgenes, ]!=0) > ncol(expr)*.1
topgenes = topgenes[topgene_filter]

# At last, we subset the preprocessed expression data. Now, we are ready to run scSorter.
picked_genes = unique(c(anno$Marker, topgenes))
expr = expr[rownames(expr) %in% picked_genes, ]

# run scSorter
rts <- scSorter(expr, anno)

#The cell type assignment results are stored in the Pred_Type vector.
print(table(rts$Pred_Type))

# add label
Idents(sample) = rts$Pred_Type
DimPlot(sample, reduction = "umap")
DimPlot(sample, reduction = "umap", split.by = 'ident')

diffgenes <- c("CD2", "CD3E", "CD3D", "CD3G", "CD79A", "SLAMF7", "BLNK", "FCRL5", "PECAM1", "VWF", "ENG", "CDH5")
diffgenes <- c("COL1A2", "FAP", "PDPN", "DCN", "COL3A1", "COL6A1", "CD14", "CD163", "CD68", "CSF1R", "EPCAM", "KRT19", "PROM1", "ALDH1A1", "CD24")
FeaturePlot(sample, features = diffgenes)
DotPlot(object = sample, features = diffgenes)




# V2 with ligand receptor mapping

library(Matrix)
library(dplyr)
library(Seurat)
library(patchwork)
library(devtools)
library(cowplot)
library(scSorter)
library(ggplot2)
library(nichenetr)
library(tidyverse)


rm(list = ls())
setwd("/Users/guagua/Library/Mobile Documents/com~apple~CloudDocs/PhD/Public data/HCC_tme")

# construct matrix after cellranger
mat <- readMM(file = "GSE125449_Set1_matrix.mtx")
feature.names = read.delim("GSE125449_Set1_genes.tsv",
                           header = FALSE,
                           stringsAsFactors = FALSE)
barcode.names = read.delim("GSE125449_Set1_barcodes.tsv",
                           header = FALSE,
                           stringsAsFactors = FALSE)
colnames(mat) = barcode.names $ V1
rownames(mat) = feature.names $ V2

# Initialize the Seurat object with the raw (non-normalized data).
sample <- CreateSeuratObject(counts = mat, project = "TME", min.cells = 3, min.features = 100)
sample
sample@meta.data

type <- read.delim("GSE125449_Set1_samples.txt")
sample <- AddMetaData(object = sample, metadata = type$Type, col.name = 'celltype')

info <- rep(c(1), times=5115)
sample <- AddMetaData(object = sample, metadata = info, col.name = '1')
# sample@meta.data$X1 '1'

# quality control
sample[["percent.mt"]] <- PercentageFeatureSet(sample, pattern = "^MT-")
sample <- subset(sample, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 15)

# normalization 
sample <- NormalizeData(sample, normalization.method = "LogNormalize", scale.factor = 10000)
sample <- FindVariableFeatures(sample, selection.method = "vst", nfeatures = 2000)

# scaling data
all.genes <- rownames(sample)
sample <- ScaleData(sample, features = all.genes)

# dimension reduction
sample <- RunPCA(sample, features = VariableFeatures(object = sample))

# Examine and visualize PCA results a few different ways
print(sample[["pca"]], dims = 1:5, nfeatures = 5)

# cell clusters
sample <- FindNeighbors(sample, dims = 1:10)
sample <- FindClusters(sample, resolution = 0.5)

# add anno
sample@meta.data$celltype %>% table() 
Idents(sample) <- sample@meta.data$celltype

# UMAP
sample <- RunUMAP(sample, dims = 1:10)
DimPlot(sample, reduction = "umap")
DimPlot(sample, reduction = "umap", split.by = 'celltype')

# find markers for every cluster compared to all remaining cells, report only the positive
# ones
sample.markers <- FindAllMarkers(sample, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
sample.markers %>%
  group_by(cluster) %>%
  slice_max(n = 2, order_by = avg_log2FC)

cluster0.markers <- FindMarkers(sample, ident.1 = 'TAM', logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)

sample.markers %>%
  group_by(cluster) %>%
  top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(sample, features = top10$gene) + NoLegend()

library(ggplot2)
DoHeatmap(object = sample, features = top10$gene) + scale_fill_gradientn(colors = c("blue", "white", "red"))


# prepare for L-R pair
ligand_target_matrix = readRDS(url("https://zenodo.org/record/3260758/files/ligand_target_matrix.rds"))
# ligand_target_matrix[1:5,1:5]

lr_network = readRDS(url("https://zenodo.org/record/3260758/files/lr_network.rds"))
# head(lr_network)

weighted_networks = readRDS(url("https://zenodo.org/record/3260758/files/weighted_networks.rds"))
weighted_networks_lr = weighted_networks$lr_sig %>% inner_join(lr_network %>% distinct(from,to), by = c("from","to"))
# head(weighted_networks$lr_sig)
# head(weighted_networks$gr)


## receiver
receiver = "TAM"
expressed_genes_receiver = get_expressed_genes(receiver, sample, pct = 0.10)
background_expressed_genes = expressed_genes_receiver %>% .[. %in% rownames(ligand_target_matrix)]

## sender
sender_celltypes = c("T cell", "B cell", "CAF")
list_expressed_genes_sender = sender_celltypes %>% unique() %>% lapply(get_expressed_genes, sample, 0.10) 
expressed_genes_sender = list_expressed_genes_sender %>% unlist() %>% unique()

# 2)
sample_receiver= subset(sample, idents = receiver)
sample_receiver = SetIdent(sample, value = sample_receiver[["celltype"]])

condition_oi = "TAM"
condition_reference = "TAM"

DE_table_receiver = FindMarkers(object = sample_receiver, ident.1 = condition_reference, min.pct = 0.10) %>% rownames_to_column("gene")

geneset_oi = DE_table_receiver %>% filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.25) %>% pull(gene)
geneset_oi = geneset_oi %>% .[. %in% rownames(ligand_target_matrix)]


# info <- rep(c(1), times=4506)
# sample <- AddMetaData(object = sample, metadata = info, col.name = '1')


# 3) 
ligands = lr_network %>% pull(from) %>% unique()
receptors = lr_network %>% pull(to) %>% unique()

expressed_ligands = intersect(ligands,expressed_genes_sender)
expressed_receptors = intersect(receptors,expressed_genes_receiver)

potential_ligands = lr_network %>% filter(from %in% expressed_ligands & to %in% expressed_receptors) %>% pull(from) %>% unique()

# 4)
ligand_activities = predict_ligand_activities(geneset = geneset_oi, background_expressed_genes = background_expressed_genes, ligand_target_matrix = ligand_target_matrix, potential_ligands = potential_ligands)

ligand_activities = ligand_activities %>% arrange(-pearson) %>% mutate(rank = rank(desc(pearson)))
# ligand_activities

best_upstream_ligands = ligand_activities %>% top_n(20, pearson) %>% arrange(-pearson) %>% pull(test_ligand) %>% unique()

DotPlot(sample, features = best_upstream_ligands %>% rev(), cols = "RdYlBu") + RotatedAxis()

# 5) 
active_ligand_target_links_df = best_upstream_ligands %>% lapply(get_weighted_ligand_target_links,geneset = geneset_oi, ligand_target_matrix = ligand_target_matrix, n = 200) %>% bind_rows() %>% drop_na()

active_ligand_target_links = prepare_ligand_target_visualization(ligand_target_df = active_ligand_target_links_df, ligand_target_matrix = ligand_target_matrix, cutoff = 0.33)

order_ligands = intersect(best_upstream_ligands, colnames(active_ligand_target_links)) %>% rev() %>% make.names()
order_targets = active_ligand_target_links_df$target %>% unique() %>% intersect(rownames(active_ligand_target_links)) %>% make.names()
rownames(active_ligand_target_links) = rownames(active_ligand_target_links) %>% make.names() # make.names() for heatmap visualization of genes like H2-T23
colnames(active_ligand_target_links) = colnames(active_ligand_target_links) %>% make.names() # make.names() for heatmap visualization of genes like H2-T23

vis_ligand_target = active_ligand_target_links[order_targets,order_ligands] %>% t()

p_ligand_target_network = vis_ligand_target %>% make_heatmap_ggplot("Prioritized ligands","Predicted target genes", color = "purple",legend_position = "top", x_axis_position = "top",legend_title = "Regulatory potential")  + theme(axis.text.x = element_text(face = "italic")) + scale_fill_gradient2(low = "whitesmoke",  high = "blue", breaks = c(0,0.0045,0.0090))
p_ligand_target_network

# 
lr_network_top = lr_network %>% filter(from %in% best_upstream_ligands & to %in% expressed_receptors) %>% distinct(from,to)
best_upstream_receptors = lr_network_top %>% pull(to) %>% unique()

lr_network_top_df_large = weighted_networks_lr %>% filter(from %in% best_upstream_ligands & to %in% best_upstream_receptors)

lr_network_top_df = lr_network_top_df_large %>% spread("from","weight",fill = 0)
lr_network_top_matrix = lr_network_top_df %>% select(-to) %>% as.matrix() %>% magrittr::set_rownames(lr_network_top_df$to)

dist_receptors = dist(lr_network_top_matrix, method = "binary")
hclust_receptors = hclust(dist_receptors, method = "ward.D2")
order_receptors = hclust_receptors$labels[hclust_receptors$order]

dist_ligands = dist(lr_network_top_matrix %>% t(), method = "binary")
hclust_ligands = hclust(dist_ligands, method = "ward.D2")
order_ligands_receptor = hclust_ligands$labels[hclust_ligands$order]

order_receptors = order_receptors %>% intersect(rownames(lr_network_top_matrix))
order_ligands_receptor = order_ligands_receptor %>% intersect(colnames(lr_network_top_matrix))

vis_ligand_receptor_network = lr_network_top_matrix[order_receptors, order_ligands_receptor]
rownames(vis_ligand_receptor_network) = order_receptors %>% make.names()
colnames(vis_ligand_receptor_network) = order_ligands_receptor %>% make.names()

p_ligand_receptor_network = vis_ligand_receptor_network %>% t() %>% make_heatmap_ggplot("Ligands","Receptors", color = "blue", x_axis_position = "top",legend_title = "Prior interaction potential")
p_ligand_receptor_network

# logFC
# DE analysis for each sender cell type
# this uses a new nichenetr function - reinstall nichenetr if necessary!
DE_table_all = Idents(sample) %>% levels() %>% intersect(sender_celltypes) %>% lapply(get_lfc_celltype, seurat_obj = sample, condition_colname = "celltype", condition_oi = condition_oi, condition_reference = condition_reference, expression_pct = 0.10, celltype_col = NULL) %>% reduce(full_join) # use this if cell type labels are the identities of your Seurat object -- if not: indicate the celltype_col properly
DE_table_all[is.na(DE_table_all)] = 0

# Combine ligand activities with DE information
ligand_activities_de = ligand_activities %>% select(test_ligand, pearson) %>% rename(ligand = test_ligand) %>% left_join(DE_table_all %>% rename(ligand = gene))
ligand_activities_de[is.na(ligand_activities_de)] = 0

# make LFC heatmap
lfc_matrix = ligand_activities_de  %>% select(-ligand, -pearson) %>% as.matrix() %>% magrittr::set_rownames(ligand_activities_de$ligand)
rownames(lfc_matrix) = rownames(lfc_matrix) %>% make.names()

order_ligands = order_ligands[order_ligands %in% rownames(lfc_matrix)]
vis_ligand_lfc = lfc_matrix[order_ligands,]

colnames(vis_ligand_lfc) = vis_ligand_lfc %>% colnames() %>% make.names()

p_ligand_lfc = vis_ligand_lfc %>% make_threecolor_heatmap_ggplot("Prioritized ligands","LFC in Sender", low_color = "midnightblue",mid_color = "white", mid = median(vis_ligand_lfc), high_color = "red",legend_position = "top", x_axis_position = "top", legend_title = "LFC") + theme(axis.text.y = element_text(face = "italic"))
p_ligand_lfc






