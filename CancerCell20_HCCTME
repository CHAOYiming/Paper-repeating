####################################
# scRNA-seq downstream analysis
# Paper: TME
# Dataset: GSE125449_Set1
# 2021-7-19 Yiming
####################################

library(Matrix)
library(dplyr)
library(Seurat)
library(patchwork)
library(scSorter)


rm(list = ls())
setwd("/usersdata/yiming/hcc/matrix")


# construct matrix after cellranger
mat <- readMM(file = "GSE125449_Set1_matrix.mtx")
feature.names = read.delim("GSE125449_Set1_genes.tsv", header = FALSE, stringsAsFactors = FALSE)
barcode.names = read.delim("GSE125449_Set1_barcodes.tsv", header = FALSE, stringsAsFactors = FALSE)
colnames(mat) = barcode.names $ V1
rownames(mat) = feature.names $ V2

celltype <- read.delim("GSE125449_Set1_samples.txt", header = TRUE)
Idents(sample) = celltype$Type

# feature.names <- make.unique(as.character(feature.names))

# duplicated(rownames(feature.names))
# which(!  duplicated(rownames(feature.names)))


# setup Seurat object with the raw data (non-normalized data)
sample <- CreateSeuratObject(counts = mat, project = "sample", min.cells = 3, min.features = 100)
sample

# quality control
sample[["percent.mt"]] <- PercentageFeatureSet(sample, pattern = "^MT-")
VlnPlot(sample, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(sample, feature1 = "nFeature_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(sample, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
sample <- subset(sample, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 15)

# normalization 
sample <- NormalizeData(sample, normalization.method = "LogNormalize", scale.factor = 10000)
sample <- FindVariableFeatures(sample, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(sample), 10)
top20 <- head(VariableFeatures(sample), 20)
top30 <- head(VariableFeatures(sample), 30)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(sample)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2

# scaling data
all.genes <- rownames(sample)
sample <- ScaleData(sample, features = all.genes)

# dimension reduction
sample <- RunPCA(sample, features = VariableFeatures(object = sample))

# Examine and visualize PCA results a few different ways
print(sample[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(sample, dims = 1:2, reduction = "pca")
DimPlot(sample, reduction = "pca")
DimHeatmap(sample, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(sample, dims = 1:15, cells = 500, balanced = TRUE)

# cell clusters
sample <- FindNeighbors(sample, dims = 1:10)
sample <- FindClusters(sample, resolution = 0.5)

# UMAP
sample <- RunUMAP(sample, dims = 1:10)
DimPlot(sample, reduction = "umap")
DimPlot(sample, reduction = "umap", split.by = 'ident')

# expression examination
diffgenes <- c("Cd34","Ccl6","Mpo","Cd14","Camp","Hba-a1","H2afz","Hmgb2","Runx1")
diffgenes <- c("CD14", "CD3D", "CD24", "CD47")
FeaturePlot(sample, features = diffgenes)
DotPlot(object = sample, features = diffgenes)

# load annotation file
anno <- read.csv(file = "../analysis/tme_annotation.csv", header = TRUE )

# Identify the 10 most highly variable genes
topgenes <- head(VariableFeatures(sample), 2000)
expr = GetAssayData(sample)
topgene_filter = rowSums(as.matrix(expr)[topgenes, ]!=0) > ncol(expr)*.1
topgenes = topgenes[topgene_filter]

# At last, we subset the preprocessed expression data. Now, we are ready to run scSorter.
picked_genes = unique(c(anno$Marker, topgenes))
expr = expr[rownames(expr) %in% picked_genes, ]

# run scSorter
rts <- scSorter(expr, anno)

#The cell type assignment results are stored in the Pred_Type vector.
print(table(rts$Pred_Type))

# add label
Idents(sample) = rts$Pred_Type
DimPlot(sample, reduction = "umap")
DimPlot(sample, reduction = "umap", split.by = 'ident')

diffgenes <- c("CD2", "CD3E", "CD3D", "CD3G", "CD79A", "SLAMF7", "BLNK", "FCRL5", "PECAM1", "VWF", "ENG", "CDH5")
diffgenes <- c("COL1A2", "FAP", "PDPN", "DCN", "COL3A1", "COL6A1", "CD14", "CD163", "CD68", "CSF1R", "EPCAM", "KRT19", "PROM1", "ALDH1A1", "CD24")
FeaturePlot(sample, features = diffgenes)
DotPlot(object = sample, features = diffgenes)












